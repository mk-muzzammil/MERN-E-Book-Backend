================Basic Setup===============
For typescript based project initializing we will make a new foldr then npm init and after it install some devDependencies fo rtypescript typescript,ts-node,@types/node,nodemon insatll all these dep and after it we will initialize the ts congiguration file 
Command==>npx ts --init and after it make a gitignore file of rit ctrl+shift+L+P add a git ignore and of node 
npm init @eslint/config is ver imp package which will help us to identify errors in our porject must be available in every project made
====>After it i will use prettier for better formatiing of code and for setting rules i will make .prettier.json file in which i will define all my rules
====>Afte this expressjs is installed and also some dep for typescript we add npm install -D @types/express so whis must be installed
===After this i will install dotenv package npm i dotenv plus for typescript some dep npm i -D @types/dotenv
===After it i will not make src folder and make app.js file in which i will write my all express code and for server running we will have server.js our entry point in which our server runs
===================Configuration Setup ==================

==> Also we wil work on a config folder which will take my configurations into count so that we will not have to change in large no of places so process.env.PORT etc we will write this in config and as in some verison of node process.env not extracted properly so we will install dotenv package which will help us to extract everything from env file easily and add it to our config folder  and after it we will make .env file in which all imp things will be kept and also in team work we will make .env.example file for partners in which they can see the imp keys that must be set but kept one thing in mind we will add wrong values of keys in .env.example bcz it must be private  
===================Mongo Db connection and setup  ==================

===> After it we will set up the mongoDb for this we can use .then() way or async await both are oka and new thing is we sue some extra event function .on('connected') ,.on('error') which is used along with mongoose and by this mongoDb is connected then in server.ts 
===================Error Handling ==================
===>After it we will work on erorr handling so as we know there are client and server(route) and in between there are 

many middlewares registered in every middleware we will use next() and pass req to next middleware and so on to req handler and then handler wil sent response back to client , But Global hanlder(Soecial kind of middleware) must e at the end after the req handler if any error comes then we will pass erorr to global error hanlder by using next(error) and then response is send back to client by the Global error handler 
==>One extra thing is for throwing errors we will use http-error package to send customized error and also it is catched by out global handler and in global handler we wil send res along with error message and error stack but kept one thing in mind errorStack must be sent on development phase not porduction one 
-----------------------------------------------------------------------------------------------------------

=======================================Basic Setup of Project completed====================================
-----------------------------------------------------------------------------------------------------------

=======================================Starting with the structure building and logic of Project======================
Now here comes different that user will built for their easyness one is MVC which is very popular in which we will work by making model,views,controllers but in this project i am trying another good method in which i will make folder according to users and all the user related files will be in it most proably userController,userRouter,userModel;

===============================Register login user working along with jwt ===========================
Simple as we do before to register a user so when we register a user we will make a token which we send as a response when the user is created and when the user will login the acessToken will be given to the user and send as a response to client and then when client req the jwt token will be added to the header of client so that on server it is verified that it is authenticated user or not